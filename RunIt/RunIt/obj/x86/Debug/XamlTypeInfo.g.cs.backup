//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace RunIt
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::RunIt.RunIt_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::RunIt.RunIt_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::RunIt.RunIt_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace RunIt.RunIt_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::RunIt.RunIt_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::RunIt.RunIt_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[35];
            _typeNameTable[0] = "RunIt.ViewModel.ViewModelLocator";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "RunIt.ViewModel.MainViewModel";
            _typeNameTable[3] = "GalaSoft.MvvmLight.ViewModelBase";
            _typeNameTable[4] = "GalaSoft.MvvmLight.ObservableObject";
            _typeNameTable[5] = "RunIt.ViewModel.AuthenticationViewModel";
            _typeNameTable[6] = "RunIt.View.AddEventView";
            _typeNameTable[7] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[8] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[9] = "RunIt.View.AddFriendsView";
            _typeNameTable[10] = "RunIt.View.AddPostView";
            _typeNameTable[11] = "DrawerLayout.DrawerLayout";
            _typeNameTable[12] = "Windows.UI.Xaml.Controls.Grid";
            _typeNameTable[13] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[14] = "Boolean";
            _typeNameTable[15] = "RunIt.View.EventView";
            _typeNameTable[16] = "RunIt.View.ForgotPasswordView";
            _typeNameTable[17] = "RunIt.View.FriendsView";
            _typeNameTable[18] = "RunIt.View.HistoryRun";
            _typeNameTable[19] = "RunIt.LoginView";
            _typeNameTable[20] = "RunIt.View.MainView";
            _typeNameTable[21] = "RunIt.View.NewsView";
            _typeNameTable[22] = "RunIt.View.PostCommentView";
            _typeNameTable[23] = "RunIt.ViewModel.PostTreeViewModel";
            _typeNameTable[24] = "RunIt.Models.BindableBase";
            _typeNameTable[25] = "GalaSoft.MvvmLight.Command.RelayCommand`1<Object>";
            _typeNameTable[26] = "System.Collections.ObjectModel.ObservableCollection`1<RunIt.Models.PostTreeModel>";
            _typeNameTable[27] = "System.Collections.ObjectModel.Collection`1<RunIt.Models.PostTreeModel>";
            _typeNameTable[28] = "RunIt.Models.PostTreeModel";
            _typeNameTable[29] = "String";
            _typeNameTable[30] = "Int32";
            _typeNameTable[31] = "RunIt.View.PostTreeView";
            _typeNameTable[32] = "RunIt.View.ProfileView";
            _typeNameTable[33] = "RunIt.View.RegisterRun";
            _typeNameTable[34] = "RunIt.View.RegisterView";

            _typeTable = new global::System.Type[35];
            _typeTable[0] = typeof(global::RunIt.ViewModel.ViewModelLocator);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::RunIt.ViewModel.MainViewModel);
            _typeTable[3] = typeof(global::GalaSoft.MvvmLight.ViewModelBase);
            _typeTable[4] = typeof(global::GalaSoft.MvvmLight.ObservableObject);
            _typeTable[5] = typeof(global::RunIt.ViewModel.AuthenticationViewModel);
            _typeTable[6] = typeof(global::RunIt.View.AddEventView);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[8] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[9] = typeof(global::RunIt.View.AddFriendsView);
            _typeTable[10] = typeof(global::RunIt.View.AddPostView);
            _typeTable[11] = typeof(global::DrawerLayout.DrawerLayout);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.Controls.Grid);
            _typeTable[13] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[14] = typeof(global::System.Boolean);
            _typeTable[15] = typeof(global::RunIt.View.EventView);
            _typeTable[16] = typeof(global::RunIt.View.ForgotPasswordView);
            _typeTable[17] = typeof(global::RunIt.View.FriendsView);
            _typeTable[18] = typeof(global::RunIt.View.HistoryRun);
            _typeTable[19] = typeof(global::RunIt.LoginView);
            _typeTable[20] = typeof(global::RunIt.View.MainView);
            _typeTable[21] = typeof(global::RunIt.View.NewsView);
            _typeTable[22] = typeof(global::RunIt.View.PostCommentView);
            _typeTable[23] = typeof(global::RunIt.ViewModel.PostTreeViewModel);
            _typeTable[24] = typeof(global::RunIt.Models.BindableBase);
            _typeTable[25] = typeof(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object>);
            _typeTable[26] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::RunIt.Models.PostTreeModel>);
            _typeTable[27] = typeof(global::System.Collections.ObjectModel.Collection<global::RunIt.Models.PostTreeModel>);
            _typeTable[28] = typeof(global::RunIt.Models.PostTreeModel);
            _typeTable[29] = typeof(global::System.String);
            _typeTable[30] = typeof(global::System.Int32);
            _typeTable[31] = typeof(global::RunIt.View.PostTreeView);
            _typeTable[32] = typeof(global::RunIt.View.ProfileView);
            _typeTable[33] = typeof(global::RunIt.View.RegisterRun);
            _typeTable[34] = typeof(global::RunIt.View.RegisterView);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_ViewModelLocator() { return new global::RunIt.ViewModel.ViewModelLocator(); }
        private object Activate_2_MainViewModel() { return new global::RunIt.ViewModel.MainViewModel(); }
        private object Activate_4_ObservableObject() { return new global::GalaSoft.MvvmLight.ObservableObject(); }
        private object Activate_5_AuthenticationViewModel() { return new global::RunIt.ViewModel.AuthenticationViewModel(); }
        private object Activate_6_AddEventView() { return new global::RunIt.View.AddEventView(); }
        private object Activate_9_AddFriendsView() { return new global::RunIt.View.AddFriendsView(); }
        private object Activate_10_AddPostView() { return new global::RunIt.View.AddPostView(); }
        private object Activate_11_DrawerLayout() { return new global::DrawerLayout.DrawerLayout(); }
        private object Activate_15_EventView() { return new global::RunIt.View.EventView(); }
        private object Activate_16_ForgotPasswordView() { return new global::RunIt.View.ForgotPasswordView(); }
        private object Activate_17_FriendsView() { return new global::RunIt.View.FriendsView(); }
        private object Activate_18_HistoryRun() { return new global::RunIt.View.HistoryRun(); }
        private object Activate_19_LoginView() { return new global::RunIt.LoginView(); }
        private object Activate_20_MainView() { return new global::RunIt.View.MainView(); }
        private object Activate_21_NewsView() { return new global::RunIt.View.NewsView(); }
        private object Activate_22_PostCommentView() { return new global::RunIt.View.PostCommentView(); }
        private object Activate_23_PostTreeViewModel() { return new global::RunIt.ViewModel.PostTreeViewModel(); }
        private object Activate_26_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::RunIt.Models.PostTreeModel>(); }
        private object Activate_27_Collection() { return new global::System.Collections.ObjectModel.Collection<global::RunIt.Models.PostTreeModel>(); }
        private object Activate_28_PostTreeModel() { return new global::RunIt.Models.PostTreeModel(); }
        private object Activate_31_PostTreeView() { return new global::RunIt.View.PostTreeView(); }
        private object Activate_32_ProfileView() { return new global::RunIt.View.ProfileView(); }
        private object Activate_33_RegisterRun() { return new global::RunIt.View.RegisterRun(); }
        private object Activate_34_RegisterView() { return new global::RunIt.View.RegisterView(); }
        private void VectorAdd_26_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::RunIt.Models.PostTreeModel>)instance;
            var newItem = (global::RunIt.Models.PostTreeModel)item;
            collection.Add(newItem);
        }
        private void VectorAdd_27_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::RunIt.Models.PostTreeModel>)instance;
            var newItem = (global::RunIt.Models.PostTreeModel)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::RunIt.RunIt_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::RunIt.RunIt_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  RunIt.ViewModel.ViewModelLocator
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_ViewModelLocator;
                userType.AddMemberName("Main");
                userType.AddMemberName("Auth");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::RunIt.RunIt_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  RunIt.ViewModel.MainViewModel
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  GalaSoft.MvvmLight.ViewModelBase
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ObservableObject"));
                xamlType = userType;
                break;

            case 4:   //  GalaSoft.MvvmLight.ObservableObject
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_ObservableObject;
                xamlType = userType;
                break;

            case 5:   //  RunIt.ViewModel.AuthenticationViewModel
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  RunIt.View.AddEventView
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_6_AddEventView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::RunIt.RunIt_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::RunIt.RunIt_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  RunIt.View.AddFriendsView
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_9_AddFriendsView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  RunIt.View.AddPostView
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_10_AddPostView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  DrawerLayout.DrawerLayout
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Grid"));
                userType.Activator = Activate_11_DrawerLayout;
                userType.AddMemberName("IsDrawerOpen");
                xamlType = userType;
                break;

            case 12:   //  Windows.UI.Xaml.Controls.Grid
                xamlType = new global::RunIt.RunIt_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::RunIt.RunIt_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  Boolean
                xamlType = new global::RunIt.RunIt_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  RunIt.View.EventView
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_15_EventView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  RunIt.View.ForgotPasswordView
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_16_ForgotPasswordView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  RunIt.View.FriendsView
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_17_FriendsView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  RunIt.View.HistoryRun
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_18_HistoryRun;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  RunIt.LoginView
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_19_LoginView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  RunIt.View.MainView
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_20_MainView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  RunIt.View.NewsView
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_NewsView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  RunIt.View.PostCommentView
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_PostCommentView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  RunIt.ViewModel.PostTreeViewModel
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("RunIt.Models.BindableBase"));
                userType.Activator = Activate_23_PostTreeViewModel;
                userType.AddMemberName("cmdTreeSelected");
                userType.AddMemberName("TreeItems");
                userType.AddMemberName("SelectedItem");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  RunIt.Models.BindableBase
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  GalaSoft.MvvmLight.Command.RelayCommand`1<Object>
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  System.Collections.ObjectModel.ObservableCollection`1<RunIt.Models.PostTreeModel>
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<RunIt.Models.PostTreeModel>"));
                userType.CollectionAdd = VectorAdd_26_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  System.Collections.ObjectModel.Collection`1<RunIt.Models.PostTreeModel>
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_27_Collection;
                userType.CollectionAdd = VectorAdd_27_Collection;
                xamlType = userType;
                break;

            case 28:   //  RunIt.Models.PostTreeModel
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("RunIt.Models.BindableBase"));
                userType.Activator = Activate_28_PostTreeModel;
                userType.AddMemberName("Text");
                userType.AddMemberName("Depth");
                userType.AddMemberName("Branch");
                userType.AddMemberName("Children");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  String
                xamlType = new global::RunIt.RunIt_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 30:   //  Int32
                xamlType = new global::RunIt.RunIt_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  RunIt.View.PostTreeView
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_PostTreeView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  RunIt.View.ProfileView
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_ProfileView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  RunIt.View.RegisterRun
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_RegisterRun;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  RunIt.View.RegisterView
                userType = new global::RunIt.RunIt_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_34_RegisterView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::WinRTXamlToolkit.WinRTXamlToolkit_WindowsPhone_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_ViewModelLocator_Main(object instance)
        {
            var that = (global::RunIt.ViewModel.ViewModelLocator)instance;
            return that.Main;
        }
        private object get_1_ViewModelLocator_Auth(object instance)
        {
            var that = (global::RunIt.ViewModel.ViewModelLocator)instance;
            return that.Auth;
        }
        private object get_2_DrawerLayout_IsDrawerOpen(object instance)
        {
            var that = (global::DrawerLayout.DrawerLayout)instance;
            return that.IsDrawerOpen;
        }
        private void set_2_DrawerLayout_IsDrawerOpen(object instance, object Value)
        {
            var that = (global::DrawerLayout.DrawerLayout)instance;
            that.IsDrawerOpen = (global::System.Boolean)Value;
        }
        private object get_3_PostTreeViewModel_cmdTreeSelected(object instance)
        {
            var that = (global::RunIt.ViewModel.PostTreeViewModel)instance;
            return that.cmdTreeSelected;
        }
        private object get_4_PostTreeViewModel_TreeItems(object instance)
        {
            var that = (global::RunIt.ViewModel.PostTreeViewModel)instance;
            return that.TreeItems;
        }
        private void set_4_PostTreeViewModel_TreeItems(object instance, object Value)
        {
            var that = (global::RunIt.ViewModel.PostTreeViewModel)instance;
            that.TreeItems = (global::System.Collections.ObjectModel.ObservableCollection<global::RunIt.Models.PostTreeModel>)Value;
        }
        private object get_5_PostTreeModel_Text(object instance)
        {
            var that = (global::RunIt.Models.PostTreeModel)instance;
            return that.Text;
        }
        private void set_5_PostTreeModel_Text(object instance, object Value)
        {
            var that = (global::RunIt.Models.PostTreeModel)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_6_PostTreeModel_Depth(object instance)
        {
            var that = (global::RunIt.Models.PostTreeModel)instance;
            return that.Depth;
        }
        private void set_6_PostTreeModel_Depth(object instance, object Value)
        {
            var that = (global::RunIt.Models.PostTreeModel)instance;
            that.Depth = (global::System.Int32)Value;
        }
        private object get_7_PostTreeModel_Branch(object instance)
        {
            var that = (global::RunIt.Models.PostTreeModel)instance;
            return that.Branch;
        }
        private void set_7_PostTreeModel_Branch(object instance, object Value)
        {
            var that = (global::RunIt.Models.PostTreeModel)instance;
            that.Branch = (global::System.Int32)Value;
        }
        private object get_8_PostTreeModel_Children(object instance)
        {
            var that = (global::RunIt.Models.PostTreeModel)instance;
            return that.Children;
        }
        private void set_8_PostTreeModel_Children(object instance, object Value)
        {
            var that = (global::RunIt.Models.PostTreeModel)instance;
            that.Children = (global::System.Collections.ObjectModel.ObservableCollection<global::RunIt.Models.PostTreeModel>)Value;
        }
        private object get_9_PostTreeViewModel_SelectedItem(object instance)
        {
            var that = (global::RunIt.ViewModel.PostTreeViewModel)instance;
            return that.SelectedItem;
        }
        private void set_9_PostTreeViewModel_SelectedItem(object instance, object Value)
        {
            var that = (global::RunIt.ViewModel.PostTreeViewModel)instance;
            that.SelectedItem = (global::System.String)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::RunIt.RunIt_XamlTypeInfo.XamlMember xamlMember = null;
            global::RunIt.RunIt_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "RunIt.ViewModel.ViewModelLocator.Main":
                userType = (global::RunIt.RunIt_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RunIt.ViewModel.ViewModelLocator");
                xamlMember = new global::RunIt.RunIt_XamlTypeInfo.XamlMember(this, "Main", "RunIt.ViewModel.MainViewModel");
                xamlMember.Getter = get_0_ViewModelLocator_Main;
                xamlMember.SetIsReadOnly();
                break;
            case "RunIt.ViewModel.ViewModelLocator.Auth":
                userType = (global::RunIt.RunIt_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RunIt.ViewModel.ViewModelLocator");
                xamlMember = new global::RunIt.RunIt_XamlTypeInfo.XamlMember(this, "Auth", "RunIt.ViewModel.AuthenticationViewModel");
                xamlMember.Getter = get_1_ViewModelLocator_Auth;
                xamlMember.SetIsReadOnly();
                break;
            case "DrawerLayout.DrawerLayout.IsDrawerOpen":
                userType = (global::RunIt.RunIt_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DrawerLayout.DrawerLayout");
                xamlMember = new global::RunIt.RunIt_XamlTypeInfo.XamlMember(this, "IsDrawerOpen", "Boolean");
                xamlMember.Getter = get_2_DrawerLayout_IsDrawerOpen;
                xamlMember.Setter = set_2_DrawerLayout_IsDrawerOpen;
                break;
            case "RunIt.ViewModel.PostTreeViewModel.cmdTreeSelected":
                userType = (global::RunIt.RunIt_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RunIt.ViewModel.PostTreeViewModel");
                xamlMember = new global::RunIt.RunIt_XamlTypeInfo.XamlMember(this, "cmdTreeSelected", "GalaSoft.MvvmLight.Command.RelayCommand`1<Object>");
                xamlMember.Getter = get_3_PostTreeViewModel_cmdTreeSelected;
                xamlMember.SetIsReadOnly();
                break;
            case "RunIt.ViewModel.PostTreeViewModel.TreeItems":
                userType = (global::RunIt.RunIt_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RunIt.ViewModel.PostTreeViewModel");
                xamlMember = new global::RunIt.RunIt_XamlTypeInfo.XamlMember(this, "TreeItems", "System.Collections.ObjectModel.ObservableCollection`1<RunIt.Models.PostTreeModel>");
                xamlMember.Getter = get_4_PostTreeViewModel_TreeItems;
                xamlMember.Setter = set_4_PostTreeViewModel_TreeItems;
                break;
            case "RunIt.Models.PostTreeModel.Text":
                userType = (global::RunIt.RunIt_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RunIt.Models.PostTreeModel");
                xamlMember = new global::RunIt.RunIt_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.Getter = get_5_PostTreeModel_Text;
                xamlMember.Setter = set_5_PostTreeModel_Text;
                break;
            case "RunIt.Models.PostTreeModel.Depth":
                userType = (global::RunIt.RunIt_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RunIt.Models.PostTreeModel");
                xamlMember = new global::RunIt.RunIt_XamlTypeInfo.XamlMember(this, "Depth", "Int32");
                xamlMember.Getter = get_6_PostTreeModel_Depth;
                xamlMember.Setter = set_6_PostTreeModel_Depth;
                break;
            case "RunIt.Models.PostTreeModel.Branch":
                userType = (global::RunIt.RunIt_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RunIt.Models.PostTreeModel");
                xamlMember = new global::RunIt.RunIt_XamlTypeInfo.XamlMember(this, "Branch", "Int32");
                xamlMember.Getter = get_7_PostTreeModel_Branch;
                xamlMember.Setter = set_7_PostTreeModel_Branch;
                break;
            case "RunIt.Models.PostTreeModel.Children":
                userType = (global::RunIt.RunIt_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RunIt.Models.PostTreeModel");
                xamlMember = new global::RunIt.RunIt_XamlTypeInfo.XamlMember(this, "Children", "System.Collections.ObjectModel.ObservableCollection`1<RunIt.Models.PostTreeModel>");
                xamlMember.Getter = get_8_PostTreeModel_Children;
                xamlMember.Setter = set_8_PostTreeModel_Children;
                break;
            case "RunIt.ViewModel.PostTreeViewModel.SelectedItem":
                userType = (global::RunIt.RunIt_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RunIt.ViewModel.PostTreeViewModel");
                xamlMember = new global::RunIt.RunIt_XamlTypeInfo.XamlMember(this, "SelectedItem", "String");
                xamlMember.Getter = get_9_PostTreeViewModel_SelectedItem;
                xamlMember.Setter = set_9_PostTreeViewModel_SelectedItem;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::RunIt.RunIt_XamlTypeInfo.XamlSystemBaseType
    {
        global::RunIt.RunIt_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::RunIt.RunIt_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::RunIt.RunIt_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::RunIt.RunIt_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


